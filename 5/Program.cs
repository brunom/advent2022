List<char>[] crates = new[]
{
    new List<char>{'Q', 'S', 'W', 'C', 'Z', 'V', 'F', 'T'},
    new List<char>{'Q', 'R', 'B'},
    new List<char>{'B', 'Z', 'T', 'Q', 'P', 'M', 'S'},
    new List<char>{'D', 'V', 'F', 'R', 'Q', 'H'},
    new List<char>{'J', 'G', 'L', 'D', 'B', 'S', 'T', 'P'},
    new List<char>{'W', 'R', 'T', 'Z'},
    new List<char>{'H', 'Q', 'M', 'N', 'S', 'F', 'R', 'J'},
    new List<char>{'R', 'N', 'F', 'H', 'W'},
    new List<char>{'J', 'Z', 'T', 'Q', 'P', 'R', 'B'},
};

void move(int iters, int src, int dst)
{
    var srcCrate = crates[src - 1];
    var dstCrate = crates[dst - 1];
    if (false)
    {
        for (int i = 0; i < iters; ++i)
        {
            dstCrate.Add(srcCrate.Last());
            srcCrate.RemoveAt(srcCrate.Count - 1);
        }
    }
    else
    {
        dstCrate.AddRange(srcCrate.Skip(srcCrate.Count - iters));
        srcCrate.RemoveRange(srcCrate.Count - iters, iters);
    }
}

move(3, 8, 2);
move(3, 1, 5);
move(3, 1, 4);
move(2, 7, 4);
move(3, 7, 4);
move(8, 5, 7);
move(2, 1, 8);
move(7, 3, 2);
move(1, 5, 2);
move(1, 6, 7);
move(2, 5, 9);
move(1, 9, 1);
move(3, 9, 6);
move(5, 6, 2);
move(10, 7, 2);
move(3, 8, 9);
move(7, 9, 2);
move(1, 1, 2);
move(1, 9, 6);
move(1, 4, 1);
move(1, 8, 2);
move(11, 4, 2);
move(1, 7, 9);
move(1, 4, 6);
move(1, 9, 7);
move(1, 1, 3);
move(1, 7, 5);
move(1, 4, 9);
move(1, 5, 2);
move(1, 3, 8);
move(1, 6, 9);
move(1, 8, 6);
move(11, 2, 1);
move(1, 6, 8);
move(7, 2, 1);
move(14, 2, 7);
move(1, 6, 3);
move(1, 8, 2);
move(1, 3, 9);
move(7, 7, 1);
move(1, 6, 5);
move(5, 7, 6);
move(4, 2, 8);
move(3, 6, 7);
move(3, 7, 8);
move(9, 1, 3);
move(8, 3, 7);
move(1, 3, 1);
move(2, 2, 3);
move(1, 6, 7);
move(2, 1, 7);
move(7, 1, 6);
move(1, 3, 5);
move(2, 5, 3);
move(7, 6, 3);
move(9, 7, 5);
move(1, 9, 1);
move(4, 8, 5);
move(7, 1, 5);
move(4, 7, 2);
move(1, 7, 8);
move(1, 6, 4);
move(10, 5, 3);
move(8, 5, 1);
move(2, 8, 3);
move(2, 8, 9);
move(8, 2, 7);
move(4, 9, 8);
move(13, 3, 7);
move(1, 5, 3);
move(6, 3, 9);
move(10, 1, 9);
move(1, 3, 4);
move(6, 9, 7);
move(1, 5, 8);
move(14, 7, 6);
move(14, 6, 1);
move(13, 1, 8);
move(1, 1, 2);
move(9, 8, 9);
move(6, 8, 5);
move(2, 4, 6);
move(1, 8, 1);
move(2, 2, 1);
move(2, 8, 6);
move(3, 1, 2);
move(3, 3, 9);
move(16, 9, 1);
move(3, 2, 4);
move(3, 7, 2);
move(6, 5, 4);
move(5, 7, 3);
move(4, 6, 1);
move(10, 2, 9);
move(13, 9, 1);
move(5, 7, 2);
move(2, 4, 6);
move(1, 9, 1);
move(2, 9, 5);
move(2, 6, 8);
move(2, 5, 3);
move(1, 8, 3);
move(31, 1, 7);
move(2, 1, 5);
move(12, 7, 3);
move(11, 3, 2);
move(1, 8, 4);
move(6, 4, 5);
move(1, 3, 4);
move(8, 3, 2);
move(5, 5, 6);
move(2, 6, 7);
move(4, 7, 3);
move(1, 6, 9);
move(13, 7, 6);
move(13, 2, 3);
move(1, 4, 8);
move(10, 2, 3);
move(3, 7, 3);
move(2, 2, 1);
move(1, 8, 2);
move(2, 4, 7);
move(1, 9, 2);
move(3, 7, 3);
move(1, 5, 1);
move(2, 5, 2);
move(15, 6, 7);
move(4, 1, 9);
move(22, 3, 9);
move(7, 3, 9);
move(4, 3, 8);
move(4, 9, 4);
move(3, 2, 4);
move(5, 7, 1);
move(7, 4, 7);
move(2, 8, 4);
move(1, 4, 8);
move(3, 1, 5);
move(2, 1, 4);
move(1, 2, 9);
move(2, 5, 7);
move(1, 5, 9);
move(3, 8, 6);
move(8, 7, 1);
move(6, 7, 1);
move(10, 1, 9);
move(3, 6, 2);
move(2, 1, 3);
move(2, 3, 6);
move(3, 7, 4);
move(2, 7, 1);
move(1, 2, 5);
move(13, 9, 5);
move(12, 9, 3);
move(6, 5, 3);
move(2, 9, 1);
move(11, 9, 3);
move(1, 4, 6);
move(2, 5, 3);
move(1, 1, 8);
move(24, 3, 5);
move(2, 9, 3);
move(2, 2, 4);
move(1, 9, 2);
move(2, 6, 8);
move(5, 3, 5);
move(2, 8, 9);
move(1, 9, 8);
move(4, 1, 4);
move(1, 9, 4);
move(1, 8, 4);
move(1, 8, 4);
move(7, 4, 5);
move(1, 1, 8);
move(1, 6, 5);
move(35, 5, 4);
move(18, 4, 3);
move(6, 4, 3);
move(8, 5, 8);
move(8, 8, 1);
move(2, 4, 9);
move(23, 3, 1);
move(1, 8, 5);
move(1, 9, 1);
move(1, 5, 1);
move(1, 9, 4);
move(11, 1, 2);
move(16, 4, 5);
move(3, 3, 5);
move(9, 2, 5);
move(1, 4, 1);
move(2, 2, 6);
move(1, 2, 9);
move(1, 6, 2);
move(1, 3, 5);
move(1, 3, 9);
move(1, 2, 9);
move(23, 1, 5);
move(1, 6, 9);
move(1, 9, 8);
move(27, 5, 1);
move(1, 9, 3);
move(18, 5, 8);
move(6, 5, 7);
move(1, 5, 6);
move(1, 9, 8);
move(12, 8, 3);
move(1, 1, 4);
move(6, 7, 8);
move(1, 6, 3);
move(1, 4, 2);
move(2, 1, 8);
move(1, 2, 9);
move(8, 3, 2);
move(2, 9, 7);
move(5, 2, 7);
move(7, 7, 2);
move(2, 8, 2);
move(3, 1, 9);
move(5, 1, 2);
move(3, 9, 8);
move(3, 8, 7);
move(5, 2, 5);
move(2, 7, 6);
move(12, 8, 9);
move(12, 1, 4);
move(9, 9, 3);
move(4, 5, 8);
move(12, 3, 8);
move(1, 7, 9);
move(3, 9, 2);
move(1, 4, 7);
move(3, 1, 7);
move(7, 4, 6);
move(3, 6, 2);
move(2, 7, 9);
move(18, 8, 1);
move(2, 4, 7);
move(1, 2, 8);
move(1, 8, 2);
move(10, 2, 3);
move(3, 9, 8);
move(2, 6, 7);
move(13, 3, 1);
move(2, 8, 9);
move(28, 1, 8);
move(1, 5, 2);
move(1, 4, 3);
move(4, 7, 6);
move(5, 6, 7);
move(7, 2, 6);
move(1, 9, 6);
move(2, 2, 4);
move(1, 9, 1);
move(4, 1, 2);
move(3, 2, 5);
move(3, 4, 9);
move(3, 5, 7);
move(1, 1, 4);
move(6, 7, 6);
move(1, 2, 6);
move(1, 4, 1);
move(1, 1, 8);
move(3, 9, 4);
move(18, 6, 3);
move(4, 3, 6);
move(1, 7, 9);
move(1, 6, 9);
move(2, 3, 6);
move(1, 9, 6);
move(1, 9, 2);
move(6, 6, 8);
move(3, 4, 7);
move(2, 7, 2);
move(35, 8, 7);
move(3, 3, 1);
move(26, 7, 2);
move(10, 3, 9);
move(6, 9, 4);
move(3, 1, 2);
move(1, 4, 3);
move(4, 4, 1);
move(1, 3, 6);
move(1, 8, 3);
move(1, 6, 2);
move(1, 3, 2);
move(13, 7, 3);
move(3, 1, 4);
move(4, 3, 1);
move(3, 1, 9);
move(2, 1, 9);
move(10, 2, 9);
move(19, 2, 9);
move(6, 3, 9);
move(2, 3, 4);
move(2, 2, 6);
move(17, 9, 8);
move(1, 2, 8);
move(2, 9, 3);
move(2, 6, 7);
move(8, 9, 3);
move(5, 4, 5);
move(14, 9, 4);
move(1, 2, 3);
move(1, 7, 2);
move(2, 9, 3);
move(1, 2, 7);
move(5, 5, 1);
move(1, 2, 1);
move(1, 3, 1);
move(1, 9, 7);
move(3, 7, 2);
move(3, 3, 7);
move(1, 2, 4);
move(1, 3, 8);
move(1, 2, 4);
move(4, 3, 4);
move(16, 8, 9);
move(3, 1, 4);
move(21, 4, 6);
move(1, 7, 2);
move(1, 8, 2);
move(1, 1, 3);
move(6, 6, 7);
move(3, 1, 9);
move(3, 7, 3);
move(1, 4, 6);
move(1, 4, 7);
move(2, 2, 6);
move(1, 8, 6);
move(13, 6, 7);
move(1, 2, 3);
move(15, 9, 8);
move(6, 6, 3);
move(13, 8, 3);
move(4, 9, 4);
move(5, 4, 8);
move(19, 3, 9);
move(3, 3, 1);
move(5, 8, 9);
move(17, 9, 7);
move(1, 1, 8);
move(4, 9, 6);
move(3, 3, 8);
move(1, 1, 2);
move(3, 3, 1);
move(36, 7, 6);
move(1, 1, 2);
move(7, 8, 2);
move(24, 6, 5);
move(2, 6, 7);
move(1, 3, 2);
move(4, 6, 8);
move(19, 5, 1);
move(8, 6, 4);
move(7, 2, 5);
move(3, 2, 8);
move(15, 1, 6);
move(2, 9, 5);
move(2, 7, 8);
move(3, 4, 1);
move(4, 5, 6);
move(1, 9, 7);
move(1, 8, 3);
move(3, 6, 1);
move(2, 4, 7);
move(13, 1, 8);
move(1, 3, 7);
move(1, 4, 5);
move(19, 8, 6);
move(1, 7, 3);
move(8, 5, 8);
move(1, 6, 8);
move(3, 5, 9);
move(1, 6, 4);
move(3, 4, 7);
move(1, 3, 9);
move(4, 7, 9);
move(20, 6, 3);
move(1, 8, 4);
move(2, 9, 4);
move(2, 9, 2);
move(2, 9, 3);
move(13, 6, 9);
move(9, 9, 8);
move(2, 6, 3);
move(8, 8, 2);
move(2, 7, 3);
move(5, 9, 3);
move(12, 3, 5);
move(1, 4, 7);
move(8, 2, 4);
move(8, 4, 7);
move(2, 2, 6);
move(2, 8, 9);
move(2, 6, 8);
move(2, 9, 6);
move(2, 6, 9);
move(2, 4, 8);
move(2, 9, 2);
move(6, 3, 1);
move(2, 2, 9);
move(3, 9, 3);
move(8, 7, 2);
move(6, 1, 2);
move(8, 3, 8);
move(1, 7, 3);
move(5, 3, 8);
move(6, 2, 7);
move(3, 7, 6);
move(2, 7, 9);
move(1, 7, 8);
move(8, 5, 7);
move(7, 2, 1);
move(7, 1, 6);
move(7, 7, 9);
move(1, 7, 6);
move(2, 3, 9);
move(2, 8, 5);
move(25, 8, 5);
move(5, 5, 1);
move(1, 6, 4);
move(17, 5, 4);
move(5, 5, 4);
move(23, 4, 7);
move(2, 5, 2);
move(4, 6, 3);
move(6, 3, 7);
move(1, 5, 2);
move(1, 1, 7);
move(2, 2, 8);
move(2, 2, 9);
move(1, 5, 7);
move(4, 1, 6);
move(2, 8, 3);
move(2, 9, 4);
move(1, 4, 8);
move(7, 9, 1);
move(2, 3, 5);
move(28, 7, 4);
move(4, 6, 2);
move(2, 6, 2);
move(3, 7, 4);
move(2, 5, 6);
move(4, 2, 6);
move(9, 6, 5);
move(4, 1, 7);
move(1, 6, 2);
move(3, 2, 3);
move(1, 8, 6);
move(1, 7, 4);
move(2, 3, 4);
move(1, 7, 4);
move(2, 1, 6);
move(1, 7, 9);
move(1, 7, 9);
move(1, 6, 2);
move(7, 5, 8);
move(1, 3, 9);
move(1, 5, 2);
move(7, 8, 7);
move(4, 4, 8);
move(2, 8, 4);
move(2, 2, 7);
move(1, 1, 7);
move(1, 5, 6);
move(32, 4, 7);
move(2, 6, 5);
move(2, 8, 2);
move(1, 2, 1);
move(2, 5, 4);
move(1, 2, 5);
move(1, 1, 4);
move(4, 4, 3);
move(1, 6, 4);
move(1, 5, 4);
move(5, 9, 1);
move(4, 3, 5);
move(3, 1, 6);
move(2, 9, 5);
move(2, 1, 3);
move(15, 7, 1);
move(5, 5, 3);
move(1, 5, 2);
move(3, 4, 5);
move(2, 5, 9);
move(3, 3, 6);
move(3, 3, 4);
move(1, 3, 8);
move(1, 9, 3);
move(2, 4, 9);
move(1, 5, 3);
move(2, 9, 6);
move(1, 8, 1);
move(1, 3, 2);
move(1, 4, 9);
move(2, 9, 3);
move(9, 1, 3);
move(5, 3, 4);
move(2, 1, 3);
move(4, 1, 5);
move(1, 2, 8);
move(3, 4, 9);

Console.WriteLine(string.Join("", crates.Select(Enumerable.Last)));
